import subprocess
import time


class MalwareLauncher:
    """
    Class to launch malware executables.

    This class provides a simple interface to run malware executables, killing the process if it runs for too long.

    Attributes:
        filepath (str): The path to the malware executable.
        timeout (float): The time in seconds before the malware process is forcefully terminated.

    Methods:
        run(): Launches the malware executable and waits for it to complete, with a timeout specified by the `timeout`
        attribute. Returns `True` if the process exited on its own, and `False` if it had to be forcefully terminated.

    Example:
        >>> launcher = MalwareLauncher('samples/malware1', timeout=1)
        >>> launcher.run() # Returns True is malware executed successfully.

        False
    """

    def __init__(self, filepath: str, timeout: float = 2.0):
        """
        Initializes a `MalwareLauncher` object.

        Args:
            filepath (str): The path to the malware executable.
            timeout (float): The time in seconds before the malware process is forcefully terminated.
        """

        self.filepath = filepath
        self.timeout = timeout

    def run(self) -> bool:
        """
        Launches the malware executable and waits for it to complete.

        The method launches the malware executable specified by the `filepath` attribute and waits for it to complete,
        with a timeout specified by the `timeout` attribute. If the process completes on its own, the method returns
        `True`. If the process exceeds the timeout, the method forcefully terminates the process and returns `False`.

        Returns:
            bool: `True` if the malware process exited on its own, `False` if it had to be forcefully terminated.
        """

        process = subprocess.Popen(
            self.filepath,
            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP | subprocess.CREATE_BREAKAWAY_FROM_JOB
        )

        timestamp = time.monotonic()
        while process.poll() is None:
            if time.monotonic() - timestamp >= self.timeout:
                process.kill()
                return False

            time.sleep(.1)

        return True
